(window.webpackJsonp=window.webpackJsonp||[]).push([[217],{528:function(t,v,_){"use strict";_.r(v);var a=_(25),s=Object(a.a)({},(function(){var t=this,v=t._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"认识时间复杂度"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#认识时间复杂度"}},[t._v("#")]),t._v(" 认识时间复杂度")]),t._v(" "),v("p",[v("strong",[t._v("常数时间的操作")]),t._v(":一个操作如果和数据量没有关系,每次都是固定时间内完成的操作,叫做常数操作。")]),t._v(" "),v("p",[t._v("时间复杂度为一个算法流程中,常数操作数量的指标。常用O(读作big O)来表示。具体来说,在常数操作数量的表达式中,只要高阶项,不要低阶项,也不要高阶项的系数,剩下的部分如果记为f(N),那么时间复杂度为O(f(N))。")]),t._v(" "),v("p",[t._v("评价一个算法流程的好坏,先看时间复杂度的指标,然后再分析不同数据样本下的实际运行时间,也就是常数项时间")]),t._v(" "),v("h2",{attrs:{id:"一个简单的理解时间复杂度的例子"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#一个简单的理解时间复杂度的例子"}},[t._v("#")]),t._v(" 一个简单的理解时间复杂度的例子")]),t._v(" "),v("p",[t._v("一个有序数组A,另一个无序数组B,请打印B中的所有不在A中的数,A数组长度为N,B数组长度为M。")]),t._v(" "),v("p",[t._v("算法流程1:对于数组B中的每一个数,都在A中通过遍历的方式找一下;\n算法流程2:对于数组B中的每一个数,都在A中通过二分的方式找一下;\n算法流程3:先把数组B排序,然后用类似外排的方式打印所有在A中出现的数;")]),t._v(" "),v("p",[t._v("三个流程,三种时间复杂度的表达...\n如何分析好坏?")]),t._v(" "),v("h2",{attrs:{id:"对数器的概念和使用"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#对数器的概念和使用"}},[t._v("#")]),t._v(" 对数器的概念和使用")]),t._v(" "),v("ol",[v("li",[t._v("有一个你想要测的方法a,")]),t._v(" "),v("li",[t._v("实现一个绝对正确但是复杂度不好的方法b,")]),t._v(" "),v("li",[t._v("实现一个随机样本产生器")]),t._v(" "),v("li",[t._v("实现比对的方法")]),t._v(" "),v("li",[t._v("把方法a和方法b比对很多次来验证方法a是否正确。")]),t._v(" "),v("li",[t._v("如果有一个样本使得比对出错,打印样本分析是哪个方法出错")]),t._v(" "),v("li",[t._v("当样本数量很多时比对测试依然正确,可以确定方法a已经正确")])])])}),[],!1,null,null,null);v.default=s.exports}}]);